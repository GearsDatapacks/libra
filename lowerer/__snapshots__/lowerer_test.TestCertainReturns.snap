
[`fn add(a, b: i32): i32 {;	if true {;		return a + b;	};}` - 1]
MODULE test
└─FUNC_DECL add a b
  ├─FUNCTION_TYPE
  │ ├─VARIABLE_TYPE i32
  │ ├─VARIABLE_TYPE i32
  │ └─VARIABLE_TYPE i32
  └─BLOCK
    ├─PRIMARY_TYPE never
    ├─LABEL block0
    └─RETURN
      └─BINARY_EXPR AddInt
        ├─VAR_SYMBOL a
        │ └─VARIABLE_TYPE i32
        ├─VAR_SYMBOL b
        │ └─VARIABLE_TYPE i32
        └─VARIABLE_TYPE i32
---

[`fn add(a, b: i32): i32 {;	mut result = a;	mut counter = b;	while true {;		if counter == 0 {;			return result;		};		result++;		counter--;	};}` - 1]
MODULE test
└─FUNC_DECL add a b
  ├─FUNCTION_TYPE
  │ ├─VARIABLE_TYPE i32
  │ ├─VARIABLE_TYPE i32
  │ └─VARIABLE_TYPE i32
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL result mut
    │ │ └─VARIABLE_TYPE i32
    │ └─VAR_SYMBOL a
    │   └─VARIABLE_TYPE i32
    ├─VAR_DECL
    │ ├─VAR_SYMBOL counter mut
    │ │ └─VARIABLE_TYPE i32
    │ └─VAR_SYMBOL b
    │   └─VARIABLE_TYPE i32
    ├─GOTO block1
    ├─LABEL block1
    ├─BRANCH block2 else block3
    │ └─BINARY_EXPR Equal
    │   ├─VAR_SYMBOL counter mut
    │   │ └─VARIABLE_TYPE i32
    │   ├─INT_LIT 0
    │   └─PRIMARY_TYPE bool
    ├─LABEL block2
    ├─RETURN
    │ └─VAR_SYMBOL result mut
    │   └─VARIABLE_TYPE i32
    ├─LABEL block3
    ├─UNARY_EXPR IncrementInt
    │ ├─VAR_SYMBOL result mut
    │ │ └─VARIABLE_TYPE i32
    │ └─VARIABLE_TYPE i32
    ├─UNARY_EXPR DecrementInt
    │ ├─VAR_SYMBOL counter mut
    │ │ └─VARIABLE_TYPE i32
    │ └─VARIABLE_TYPE i32
    └─GOTO block1
---
