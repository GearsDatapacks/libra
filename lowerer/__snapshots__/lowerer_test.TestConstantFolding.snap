
[`let value = 1 + 2` - 1]
MODULE test
└─FUNC_DECL main
  ├─FUNCTION_TYPE
  │ └─UNIT_STRUCT void
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL value
    │ │ ├─VARIABLE_TYPE i32
    │ │ └─INT_VALUE 3
    │ └─INT_LIT 3
    └─RETURN
---

[`let value = true && false` - 1]
MODULE test
└─FUNC_DECL main
  ├─FUNCTION_TYPE
  │ └─UNIT_STRUCT void
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL value
    │ │ ├─PRIMARY_TYPE bool
    │ │ └─BOOL_VALUE false
    │ └─BOOL_LIT false
    └─RETURN
---

[`let value = "Hello, " + "world!"` - 1]
MODULE test
└─FUNC_DECL main
  ├─FUNCTION_TYPE
  │ └─UNIT_STRUCT void
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL value
    │ │ ├─PRIMARY_TYPE string
    │ │ └─STRING_VALUE "Hello, world!"
    │ └─STRING_LIT "Hello, world!"
    └─RETURN
---

[`let value = 1 == 2 || 3 == 3` - 1]
MODULE test
└─FUNC_DECL main
  ├─FUNCTION_TYPE
  │ └─UNIT_STRUCT void
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL value
    │ │ ├─PRIMARY_TYPE bool
    │ │ └─BOOL_VALUE true
    │ └─BOOL_LIT true
    └─RETURN
---

[`let value = (4 / 2) + 1` - 1]
MODULE test
└─FUNC_DECL main
  ├─FUNCTION_TYPE
  │ └─UNIT_STRUCT void
  └─BLOCK
    ├─UNIT_STRUCT void
    ├─LABEL block0
    ├─VAR_DECL
    │ ├─VAR_SYMBOL value
    │ │ ├─VARIABLE_TYPE f32
    │ │ └─FLOAT_VALUE 3
    │ └─FLOAT_LIT 3
    └─RETURN
---
