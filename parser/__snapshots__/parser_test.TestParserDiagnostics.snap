
[`)` - 1]
test.lb:1:1:
)
^ Expected expression, found `)`


---

[`let a = ;` - 1]
test.lb:1:9:
let a = ;
        ^ Expected expression, found `;`


---

[`1 2` - 1]
test.lb:1:3:
1 2
  ^ Expected newline after statement, found integer


---

[`(1 + 2` - 1]
test.lb:1:7:
(1 + 2
      ^ Expected `)`, found <Eof>


---

[`else; {}` - 1]
test.lb:1:1:
else
^ Else statement not allowed without preceding if


---

[`for i 42 {}` - 1]
test.lb:1:7:
for i 42 {}
      ^ Expected "in" keyword, found integer


---

[`let in = 1;for i in 20 {}` - 1]
test.lb:2:7:
for i in 20 {}
      ^ Expected "in" keyword, but it has been overwritten by a variable

test.lb:1:5:
let in = 1
    ^ Try removing or renaming this variable


---

[`fn add(a: i32, b, c): f32 {}` - 1]
test.lb:1:19:
fn add(a: i32, b, c): f32 {}
                  ^ The last parameter of a function must have a type annotation


---

[`fn foo(;bar;): baz {}` - 1]
test.lb:2:1:
bar
^ The last parameter of a function must have a type annotation

test.lb:1:4:
fn foo(
   ^ Parameter of this function


---

[`fn func_type(mut i32[]) {}` - 1]
test.lb:1:14:
fn func_type(mut i32[]) {}
             ^ "mut" must be followed by a parameter name


---

[`fn (string) bool.maybe() {}` - 1]
test.lb:1:13:
fn (string) bool.maybe() {}
            ^ Functions cannot be both methods and static members


---

[`import * from "io" as in_out` - 1]
test.lb:1:20:
import * from "io" as in_out
                   ^ Only one import modifier is allowed


---

[`import {read, write} from * from "io"` - 1]
test.lb:1:27:
import {read, write} from * from "io"
                          ^ Only one import modifier is allowed


---

[`if true { fn a() {} }` - 1]
test.lb:1:11:
if true { fn a() {} }
          ^ Function declaration not allowed here


---

[`type T = ;` - 1]
test.lb:1:10:
type T = ;
         ^ Expected type, found `;`


---

[`let value = .` - 1]
test.lb:1:14:
let value = .
             ^ Invalid right-hand side of expression. Expected identifier or struct body, found <Eof>


---

[`pub return 10` - 1]
test.lb:1:1:
pub return 10
^ Only top-level declarations can be exported


---

[`explicit fn func() {}` - 1]
test.lb:1:1:
explicit fn func() {}
^ Statement cannot be marked explicit


---

[`@nonexistent;fn attributed() {}` - 1]
test.lb:1:1:
@nonexistent
^ The attribute "nonexistent" does not exist


---

[`@tag FunctionTag;fn tagged() {}` - 1]
test.lb:2:1:
fn tagged() {}
^ Statement cannot be marked with attribute "tag"


---
